const $=s=>document.querySelector(s);
function computeHCarcass(k){return k.H_total-k.H_plinth-k.T_top}
function solveItem(k,it){const H=computeHCarcass(k),gap=k.Gap,FIRST=k.DatumFirstDrawer;const res={id:it.id,H_carcass:H,fronts:[],gaps:[],notes:[]},push=()=>res.gaps.push(gap);switch(it.type){case"sink_1door":case"combo_drawer_door":{const f1=FIRST,f2=H-f1-gap;res.fronts.push(f1);push();res.fronts.push(f2);break}case"dishwasher_60":{const n=it.appliance?.nicheMin??815;if(n>H)res.notes.push(`Upozorenje: nicheMin ${n}mm > H_carcass ${H}mm.`);res.fronts.push(H);break}case"oven_housing":{const on=it.appliance?.ovenNiche??595;const f1=FIRST,rest=H-f1-gap;let top=Math.max(0,rest-on);res.fronts.push(f1);push();res.fronts.push(on);if(top>0){push();res.fronts.push(top)}else res.notes.push("Nema top trim panela ili je minimalan; proveri Gap i rernu.");break}case"drawer_3":{const second=(it.drawerHeights&&it.drawerHeights[1]!=null)?it.drawerHeights[1]:200;const third=H-FIRST-second-2*gap;res.fronts.push(FIRST);push();res.fronts.push(second);push();res.fronts.push(third);break}default:res.notes.push("Nepoznat tip: "+it.type)}const f=res.fronts.reduce((a,b)=>a+b,0),g=res.gaps.reduce((a,b)=>a+b,0),d=H-(f+g);if(Math.abs(d)>0.5)res.notes.push(`Neusaglašeno: diff=${d.toFixed(1)}mm`);return res}
function solveOrder(cfg,ord){return ord.map(it=>solveItem(cfg.Kitchen,it))}
function renderElementSVG(res,w=120,ppm=0.35){const tot=res.H_carcass*ppm;let y=0,s=`<svg width="${w}" height="${Math.round(tot)}" viewBox="0 0 ${w} ${Math.round(tot)}" xmlns="http://www.w3.org/2000/svg">`;res.fronts.forEach((h,i)=>{const hp=h*ppm;s+=`<rect x="0" y="${y}" width="${w}" height="${hp}" fill="white" stroke="black"/>`;s+=`<text x="${w/2}" y="${y+hp/2}" font-size="10" text-anchor="middle" dominant-baseline="middle">${Math.round(h)}mm</text>`;y+=hp;if(i<res.gaps.length){const gp=res.gaps[i]*ppm;s+=`<rect x="${w*0.1}" y="${y}" width="${w*0.8}" height="${gp}" fill="lightgray"/>`;y+=gp}});return s+`</svg>`}
function bomForItem(cfg,it,sol){const out=[],mat="MDF_Lak",th=18,edge="2L+2S",wf=(it.width??600)-4;sol.fronts.forEach((h,i)=>out.push({itemId:it.id,part:`FRONT-${i+1}`,qty:1,w:wf,h:Math.round(h),th:th,edge:edge,material:mat,notes:""}));const t=cfg.Kitchen.Defaults.SideThickness,d=it.depth??cfg.Kitchen.Defaults.CarcassDepth,H=sol.H_carcass,netW=(it.width??600)-2*t;out.push({itemId:it.id,part:"BOK-L",qty:1,w:d,h:H,th:t,edge:"2L",material:"PB18",notes:""});out.push({itemId:it.id,part:"BOK-R",qty:1,w:d,h:H,th:t,edge:"2L",material:"PB18",notes:""});out.push({itemId:it.id,part:"DNO",qty:1,w:d,h:netW,th:t,edge:"1L",material:"PB18",notes:"orijentacija: dubina x širina"});out.push({itemId:it.id,part:"RAIL-TOP",qty:1,w:netW,h:100,th:t,edge:"1L",material:"PB18",notes:""});out.push({itemId:it.id,part:"RAIL-BOT",qty:1,w:netW,h:100,th:t,edge:"1L",material:"PB18",notes:""});out.push({itemId:it.id,part:"LEĐA",qty:1,w:netW,h:H-50,th:cfg.Kitchen.Defaults.BackThickness,edge:"-",material:"HDF3",notes:""});switch(it.type){case"drawer_3":out.push({itemId:it.id,part:"OKOV",qty:3,w:"-",h:"-",th:"-",edge:"-",material:"KLIZAČ",notes:"3x set klizača (po izboru)"});break;case"sink_1door":out.push({itemId:it.id,part:"OKOV",qty:2,w:"-",h:"-",th:"-",edge:"-",material:"ŠARKE",notes:"2–3 šarke"});break;case"combo_drawer_door":out.push({itemId:it.id,part:"OKOV",qty:1,w:"-",h:"-",th:"-",edge:"-",material:"KLIZAČ",notes:"1x set klizača + 2–3 šarke"});break;case"oven_housing":out.push({itemId:it.id,part:"OKOV",qty:1,w:"-",h:"-",th:"-",edge:"-",material:"SET",notes:"Nosači rerne + ventilacioni prorezi"});break;case"dishwasher_60":out.push({itemId:it.id,part:"OKOV",qty:1,w:"-",h:"-",th:"-",edge:"-",material:"SET",notes:"Adapter/šrafovi po specifikaciji mašine"});break}return out}
function aggregateBOM(ls){const key=r=>[r.part,r.w,r.h,r.th,r.edge,r.material,r.notes].join("|");const m=new Map();for(const r of ls){const k=key(r),p=m.get(k);if(p)p.qty+=r.qty;else m.set(k,{...r})}return[...m.values()]}
function toCSV(rows){const esc=v=>{if(v==null)return"";const s=String(v);return /[",\n;]/.test(s)?'"'+s.replace(/"/g,'""')+'"':s};const hdr=["ItemID","Part","Qty","W","H","Th","Edge","Material","Notes"];const out=[hdr.join(";")];for(const r of rows)out.push([r.itemId,r.part,r.qty,r.w,r.h,r.th,r.edge,r.material,r.notes].map(esc).join(";"));return out.join("\n")}
function renderGlobals(k){const Hc=computeHCarcass(k);$("#globals").innerHTML=[`<span class="pill">H_total: <b>${k.H_total}</b></span>`,`<span class="pill">H_plinth: <b>${k.H_plinth}</b></span>`,`<span class="pill">T_top: <b>${k.T_top}</b></span>`,`<span class="pill success">H_carcass: <b>${Hc}</b></span>`,`<span class="pill">Gap: <b>${k.Gap}</b></span>`,`<span class="pill">DatumFirstDrawer: <b>${k.DatumFirstDrawer}</b></span>`].join(" ")}
function renderElements(cfg,order,sol){const host=$("#elements");host.innerHTML="";sol.forEach((res,i)=>{const it=order[i];const d=document.createElement("div");d.className="el";d.innerHTML=`<h4>${it.id} – ${it.type} (${it.width}×${it.depth})</h4><div class="svgwrap">${renderElementSVG(res,120,0.35)}</div>${res.notes.length?'<div class="notes">'+res.notes.map(n=>'- '+n).join('<br>')+'</div>':""}`;host.appendChild(d)})}
function renderBOM(agg){const tb=$("#bomTable tbody");tb.innerHTML="";for(const r of agg){const tr=document.createElement("tr");tr.innerHTML=`<td>${r.itemId??"-"}</td><td>${r.part}</td><td class="right">${r.qty}</td><td class="right">${r.w}</td><td class="right">${r.h}</td><td class="right">${r.th}</td><td>${r.edge}</td><td>${r.material}</td><td>${r.notes}</td>`;tb.appendChild(tr)}}
function renderCSVPreview(rows){const tb=$("#csvPreviewTable tbody");if(!tb)return;tb.innerHTML="";for(const r of rows){const tr=document.createElement("tr");[r.itemId,r.part,r.qty,r.w,r.h,r.th,r.edge,r.material,r.notes].forEach((v,i)=>{const td=document.createElement("td");td.textContent=(v==null?"":String(v));if(i>=2&&i<=5)td.className="right";tr.appendChild(td)});tb.appendChild(tr)}}
function wireCopyCsv(){const b=$("#btnCopyCsv");if(!b)return;b.addEventListener("click",async()=>{try{const rows=window.__lastAggBOM||[];const csv=toCSV(rows);await navigator.clipboard.writeText(csv);b.textContent="Kopirano ✓";setTimeout(()=>b.textContent="Kopiraj CSV",1500)}catch(e){b.textContent="Greška pri kopiranju";setTimeout(()=>b.textContent="Kopiraj CSV",1500)}})}
function downloadCSVMobileAware(name,csv){const blob=new Blob([csv],{type:"text/csv;charset=utf-8"});const url=URL.createObjectURL(blob);const a=document.createElement("a");a.href=url;a.download=name;a.rel="noopener";a.target="_blank";document.body.appendChild(a);a.click();a.remove();setTimeout(()=>URL.revokeObjectURL(url),2000)}
function recompute(){ $("#msg").textContent=""; try{ const data=JSON.parse($("#jsonInput").value),cfg=data; renderGlobals(cfg.Kitchen); const solved=solveOrder(cfg,data.Order); renderElements(cfg,data.Order,solved); let all=[]; data.Order.forEach((it,i)=>{all=all.concat(bomForItem(cfg,it,solved[i]))}); const agg=aggregateBOM(all); renderBOM(agg); renderCSVPreview(agg); wireCopyCsv(); const csv=toCSV(agg); const a=$("#csvLink"); if(a){a.href="data:text/csv;charset=utf-8,"+encodeURIComponent(csv); a.download="3xmeri_BOM.csv"} const raw=$("#csvRaw"); if(raw) raw.value=csv; const val=[],uniq=new Set(solved.map(s=>s.H_carcass)); val.push(uniq.size===1?"✔ Svi elementi imaju isti H_carcass.":"⚠ Različite visine korpusa."); const notes=solved.flatMap(s=>s.notes.map(n=>s.id+": "+n)); if(notes.length) val.push("⚠ Napomene:<br>"+notes.map(n=>"• "+n).join("<br>")); $("#valid").innerHTML=val.join("<br>"); window.__lastAggBOM=agg; }catch(e){ console.error(e); $("#msg").textContent="Greška u JSON-u: "+e.message; } }
window.addEventListener("DOMContentLoaded",()=>{ $("#btnRun").addEventListener("click",recompute); $("#btnReset").addEventListener("click",()=>{const ta=$("#jsonInput"); ta.value=ta.defaultValue; recompute();}); $("#btnCsv").addEventListener("click",()=>{const rows=window.__lastAggBOM||[]; const csv=toCSV(rows); downloadCSVMobileAware("3xmeri_BOM.csv",csv)}); recompute(); });
